from ..protocol import Protocol, Struct, Variable, NUMERIC_TYPE_SIZES
from ..writer import Writer, TextUtil
from .. import LIB_NAME, LIB_VERSION

LANGUAGE_NAME = "Python"


class PythonWriter(Writer):
    language_name = LANGUAGE_NAME
    default_extension = ".py"
    in_progress = True

    def __init__(self, p: Protocol, extra_args: dict[str,any] = {}):
        super().__init__(protocol=p, tab="    ")

        self.embed_protocol = extra_args["embed_protocol"]

        self.type_mapping["byte"] = "int"
        self.type_mapping["bool"] = "bool"
        self.type_mapping["uint16"] = "int"
        self.type_mapping["int16"] = "int"
        self.type_mapping["uint32"] = "int"
        self.type_mapping["int32"] = "int"
        self.type_mapping["uint64"] = "int"
        self.type_mapping["int64"] = "int"
        self.type_mapping["float"] = "float"
        self.type_mapping["double"] = "float"


    def generate(self) -> str:
        self.output = []

        self.write_line(f"# This file was automatically generated by {LIB_NAME} v{LIB_VERSION}")
        self.write_line( "# <https://github.com/sjml/beschi>")
        self.write_line(f"# Do not edit directly.")
        self.write_line()

        if self.embed_protocol:
            self.write_line('"""')
            self.write_line("DATA PROTOCOL")
            self.write_line("-----------------")
            [self.write_line(f"{l}") for l in self.protocol.protocol_string.splitlines()]
            self.write_line("-----------------")
            self.write_line("END DATA PROTOCOL")
            self.write_line('"""')
            self.write_line()
            self.write_line()


        return "\n".join(self.output)
