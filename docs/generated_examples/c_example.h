// This file was automatically generated by Beschi v0.1.12
// <https://github.com/sjml/beschi>
// Do not edit directly.

// To use this header file, include it normally wherever you need access
//   to its structures and functions.
// Then in *exactly* one file, #define APPMESSAGES_IMPLEMENTATION
//   *before* including it.

#ifndef INCLUDE_APPMESSAGES_H
#define INCLUDE_APPMESSAGES_H

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

typedef uint8_t AppMessages_err_t;
#define APPMESSAGES_ERR_OK  0
#define APPMESSAGES_ERR_EOF 1
#define APPMESSAGES_ERR_INVALID_DATA 2
#define APPMESSAGES_ERR_ALLOCATION_FAILURE 3

#ifdef __cplusplus
extern "C" {
#endif

///////////////////////////////////////
// standard utility declarations

typedef struct {
    uint8_t* buffer;
    size_t bufferSize;
    size_t position;
} AppMessages_DataAccess;

bool AppMessages_IsFinished(AppMessages_DataAccess *r);
AppMessages_err_t AppMessages__ReadUInt8(AppMessages_DataAccess *r, uint8_t *ui8);
AppMessages_err_t AppMessages__ReadBool(AppMessages_DataAccess *r, bool *b);
AppMessages_err_t AppMessages__ReadInt16(AppMessages_DataAccess *r, int16_t *i16);
AppMessages_err_t AppMessages__ReadUInt16(AppMessages_DataAccess *r, uint16_t *ui16);
AppMessages_err_t AppMessages__ReadInt32(AppMessages_DataAccess *r, int32_t *i32);
AppMessages_err_t AppMessages__ReadUInt32(AppMessages_DataAccess *r, uint32_t *ui32);
AppMessages_err_t AppMessages__ReadInt64(AppMessages_DataAccess *r, int64_t *i64);
AppMessages_err_t AppMessages__ReadUInt64(AppMessages_DataAccess *r, uint64_t *ui32);
AppMessages_err_t AppMessages__ReadFloat(AppMessages_DataAccess *r, float *f);
AppMessages_err_t AppMessages__ReadDouble(AppMessages_DataAccess *r, double *d);
AppMessages_err_t AppMessages__ReadString(AppMessages_DataAccess *r, char **s, uint8_t *len);

AppMessages_err_t AppMessages__WriteUInt8(AppMessages_DataAccess *w, const uint8_t *ui8);
AppMessages_err_t AppMessages__WriteBool(AppMessages_DataAccess *w, const bool *b);
AppMessages_err_t AppMessages__WriteInt16(AppMessages_DataAccess *w, const int16_t *i16);
AppMessages_err_t AppMessages__WriteUInt16(AppMessages_DataAccess *w, const uint16_t *ui16);
AppMessages_err_t AppMessages__WriteInt32(AppMessages_DataAccess *w, const int32_t *i32);
AppMessages_err_t AppMessages__WriteUInt32(AppMessages_DataAccess *w, const uint32_t *ui32);
AppMessages_err_t AppMessages__WriteInt64(AppMessages_DataAccess *w, const int64_t *i64);
AppMessages_err_t AppMessages__WriteUInt64(AppMessages_DataAccess *w, const uint64_t *ui32);
AppMessages_err_t AppMessages__WriteFloat(AppMessages_DataAccess *w, const float *f);
AppMessages_err_t AppMessages__WriteDouble(AppMessages_DataAccess *w, const double *d);
AppMessages_err_t AppMessages__WriteString(AppMessages_DataAccess *w, char* const *s, const uint8_t *len);

// end of standard utility declarations
///////////////////////////////////////


///////////////////////////////////////
// struct/message declarations

typedef enum {
    AppMessages_MessageType___NullMessage = 0,
    AppMessages_MessageType_Vector3Message = 1,
    AppMessages_MessageType_NewCharacterMessage = 2,
    AppMessages_MessageType_CharacterJoinedTeam = 3
} AppMessages_MessageType;

AppMessages_MessageType AppMessages_GetMessageType(const void* m);
AppMessages_err_t AppMessages_GetSizeInBytes(const void* m, size_t* len);
AppMessages_err_t AppMessages_ProcessRawBytes(AppMessages_DataAccess* r, void*** msgListOut, size_t* len);
AppMessages_err_t AppMessages_DestroyMessageList(void** msgList, size_t len);

typedef struct {
    float red;
    float green;
    float blue;
    float alpha;
} AppMessages_Color;

AppMessages_err_t AppMessages_Color_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Color* src);
AppMessages_err_t AppMessages_Color_FromBytes(AppMessages_DataAccess* r, AppMessages_Color* dst);


typedef struct {
    AppMessages_Color defaultColor;
    uint16_t colors_len;
    AppMessages_Color* colors;
} AppMessages_Spectrum;

AppMessages_err_t AppMessages_Spectrum_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Spectrum* src);
AppMessages_err_t AppMessages_Spectrum_FromBytes(AppMessages_DataAccess* r, AppMessages_Spectrum* dst);


typedef struct {
    AppMessages_MessageType _mt;
    float x;
    float y;
    float z;
} AppMessages_Vector3Message;
extern const AppMessages_Vector3Message AppMessages_Vector3Message_default;
const AppMessages_Vector3Message AppMessages_Vector3Message_default = {
    ._mt = AppMessages_MessageType_Vector3Message,
    .x = 0.0f,
    .y = 0.0f,
    .z = 0.0f,
};

AppMessages_err_t AppMessages_Vector3Message_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Vector3Message* src, bool tag);
AppMessages_err_t AppMessages_Vector3Message_FromBytes(AppMessages_DataAccess* r, AppMessages_Vector3Message* dst);
AppMessages_err_t AppMessages_Vector3Message_GetSizeInBytes(const AppMessages_Vector3Message* m, size_t* size);
void AppMessages_Vector3Message_Destroy(AppMessages_Vector3Message *m);


typedef struct {
    AppMessages_MessageType _mt;
    uint64_t id;
    uint8_t characterName_len;
    char* characterName;
    uint16_t strength;
    uint16_t intelligence;
    uint16_t dexterity;
    uint32_t goldInWallet;
    uint16_t nicknames_len;
    uint16_t* nicknames_els_len;
    char** nicknames;
} AppMessages_NewCharacterMessage;
extern const AppMessages_NewCharacterMessage AppMessages_NewCharacterMessage_default;
const AppMessages_NewCharacterMessage AppMessages_NewCharacterMessage_default = {
    ._mt = AppMessages_MessageType_NewCharacterMessage,
    .id = 0,
    .characterName_len = 0,
    .characterName = (char*)"",
    .strength = 0,
    .intelligence = 0,
    .dexterity = 0,
    .goldInWallet = 0,
    .nicknames_len = 0,
    .nicknames_els_len = NULL,
    .nicknames = NULL,
};

AppMessages_err_t AppMessages_NewCharacterMessage_WriteBytes(AppMessages_DataAccess* w, const AppMessages_NewCharacterMessage* src, bool tag);
AppMessages_err_t AppMessages_NewCharacterMessage_FromBytes(AppMessages_DataAccess* r, AppMessages_NewCharacterMessage* dst);
AppMessages_err_t AppMessages_NewCharacterMessage_GetSizeInBytes(const AppMessages_NewCharacterMessage* m, size_t* size);
void AppMessages_NewCharacterMessage_Destroy(AppMessages_NewCharacterMessage *m);


typedef struct {
    AppMessages_MessageType _mt;
    uint64_t characterID;
    uint8_t teamName_len;
    char* teamName;
    uint16_t teamColors_len;
    AppMessages_Color* teamColors;
} AppMessages_CharacterJoinedTeam;
extern const AppMessages_CharacterJoinedTeam AppMessages_CharacterJoinedTeam_default;
const AppMessages_CharacterJoinedTeam AppMessages_CharacterJoinedTeam_default = {
    ._mt = AppMessages_MessageType_CharacterJoinedTeam,
    .characterID = 0,
    .teamName_len = 0,
    .teamName = (char*)"",
    .teamColors_len = 0,
    .teamColors = NULL,
};

AppMessages_err_t AppMessages_CharacterJoinedTeam_WriteBytes(AppMessages_DataAccess* w, const AppMessages_CharacterJoinedTeam* src, bool tag);
AppMessages_err_t AppMessages_CharacterJoinedTeam_FromBytes(AppMessages_DataAccess* r, AppMessages_CharacterJoinedTeam* dst);
AppMessages_err_t AppMessages_CharacterJoinedTeam_GetSizeInBytes(const AppMessages_CharacterJoinedTeam* m, size_t* size);
void AppMessages_CharacterJoinedTeam_Destroy(AppMessages_CharacterJoinedTeam *m);


// end of struct/message declarations
///////////////////////////////////////


#ifdef APPMESSAGES_IMPLEMENTATION

//////////////////////////////////////////////////////////////////////////////
//
//   IMPLEMENTATION
//


///////////////////////////////////////
// standard utility definitions

bool AppMessages_IsFinished(AppMessages_DataAccess *r) {
    return r->position >= r->bufferSize;
}

AppMessages_err_t AppMessages__ReadUInt8(AppMessages_DataAccess *r, uint8_t *ui8) {
    if (r->bufferSize < r->position + 1) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(ui8, r->buffer + r->position, 1);
    r->position += 1;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadBool(AppMessages_DataAccess *r, bool *b) {
    uint8_t byteVal;
    AppMessages_err_t err = AppMessages__ReadUInt8(r, &byteVal);
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    *b = byteVal > 0;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadInt16(AppMessages_DataAccess *r, int16_t *i16) {
    if (r->bufferSize < r->position + 2) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(i16, r->buffer + r->position, 2);
    r->position += 2;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadUInt16(AppMessages_DataAccess *r, uint16_t *ui16) {
    if (r->bufferSize < r->position + 2) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(ui16, r->buffer + r->position, 2);
    r->position += 2;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadInt32(AppMessages_DataAccess *r, int32_t *i32) {
    if (r->bufferSize < r->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(i32, r->buffer + r->position, 4);
    r->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadUInt32(AppMessages_DataAccess *r, uint32_t *ui32) {
    if (r->bufferSize < r->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(ui32, r->buffer + r->position, 4);
    r->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadInt64(AppMessages_DataAccess *r, int64_t *i64) {
    if (r->bufferSize < r->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(i64, r->buffer + r->position, 8);
    r->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadUInt64(AppMessages_DataAccess *r, uint64_t *ui64) {
    if (r->bufferSize < r->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(ui64, r->buffer + r->position, 8);
    r->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadFloat(AppMessages_DataAccess *r, float *f) {
    if (r->bufferSize < r->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(f, r->buffer + r->position, 4);
    r->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadDouble(AppMessages_DataAccess *r, double *d) {
    if (r->bufferSize < r->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(d, r->buffer + r->position, 8);
    r->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__ReadString(AppMessages_DataAccess *r, char **s, uint8_t *len) {
    AppMessages_err_t err;
    err = AppMessages__ReadUInt8(r, len);
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    if (r->bufferSize < r->position + *len) {
        return APPMESSAGES_ERR_EOF;
    }
    *s = (char*)calloc(1, (size_t)(*len + 1));
    if (*s == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    memcpy(*s, r->buffer + r->position, *len);
    r->position += *len;
    return APPMESSAGES_ERR_OK;
}



AppMessages_err_t AppMessages__WriteUInt8(AppMessages_DataAccess *w, const uint8_t *ui8) {
    if (w->bufferSize < w->position + 1) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, ui8, 1);
    w->position += 1;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteBool(AppMessages_DataAccess *w, const bool *b) {
    AppMessages_err_t err;
    uint8_t byteVal = (uint8_t)(*b ? 1 : 0);
    err = AppMessages__WriteUInt8(w, &byteVal);
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteInt16(AppMessages_DataAccess *w, const int16_t *i16) {
    if (w->bufferSize < w->position + 2) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, i16, 2);
    w->position += 2;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteUInt16(AppMessages_DataAccess *w, const uint16_t *ui16) {
    if (w->bufferSize < w->position + 2) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, ui16, 2);
    w->position += 2;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteInt32(AppMessages_DataAccess *w, const int32_t *i32) {
    if (w->bufferSize < w->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, i32, 4);
    w->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteUInt32(AppMessages_DataAccess *w, const uint32_t *ui32) {
    if (w->bufferSize < w->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, ui32, 4);
    w->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteInt64(AppMessages_DataAccess *w, const int64_t *i64) {
    if (w->bufferSize < w->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, i64, 8);
    w->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteUInt64(AppMessages_DataAccess *w, const uint64_t *ui64) {
    if (w->bufferSize < w->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, ui64, 8);
    w->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteFloat(AppMessages_DataAccess *w, const float *f) {
    if (w->bufferSize < w->position + 4) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, f, 4);
    w->position += 4;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteDouble(AppMessages_DataAccess *w, const double *d) {
    if (w->bufferSize < w->position + 8) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, d, 8);
    w->position += 8;
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages__WriteString(AppMessages_DataAccess *w, char* const *s, const uint8_t *len) {
    AppMessages_err_t err;
    err = AppMessages__WriteUInt8(w, len);
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    if (w->bufferSize < w->position + *len) {
        return APPMESSAGES_ERR_EOF;
    }
    memcpy(w->buffer + w->position, *s, *len);
    w->position += *len;
    return APPMESSAGES_ERR_OK;
}

// end of standard utility definitions
///////////////////////////////////////


///////////////////////////////////////
// struct/message definitions

AppMessages_MessageType AppMessages_GetMessageType(const void* m) {
    const uint8_t* buffer = (const uint8_t*)m;
    uint8_t msgType = buffer[0];
    if (msgType > 3) {
        return AppMessages_MessageType___NullMessage;
    }
    return (AppMessages_MessageType)msgType;
}

AppMessages_err_t AppMessages_GetSizeInBytes(const void* m, size_t* len) {
    AppMessages_MessageType msgType = AppMessages_GetMessageType(m);
    switch (msgType) {
    case AppMessages_MessageType___NullMessage:
        return APPMESSAGES_ERR_INVALID_DATA;
        break;
    case AppMessages_MessageType_Vector3Message:
        return AppMessages_Vector3Message_GetSizeInBytes((const AppMessages_Vector3Message*)m, len);
        break;
    case AppMessages_MessageType_NewCharacterMessage:
        return AppMessages_NewCharacterMessage_GetSizeInBytes((const AppMessages_NewCharacterMessage*)m, len);
        break;
    case AppMessages_MessageType_CharacterJoinedTeam:
        return AppMessages_CharacterJoinedTeam_GetSizeInBytes((const AppMessages_CharacterJoinedTeam*)m, len);
        break;
    }
    return APPMESSAGES_ERR_INVALID_DATA;
}

AppMessages_err_t AppMessages_ProcessRawBytes(AppMessages_DataAccess* r, void*** msgListDst, size_t* len) {
    AppMessages_err_t err = APPMESSAGES_ERR_OK;
    size_t currCapacity = 8;
    *msgListDst = (void**)malloc(sizeof(void*) * currCapacity);
    if (*msgListDst == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    *len = 0;
    while (!AppMessages_IsFinished(r)) {
        while (*len >= currCapacity) {
            currCapacity *= 2;
            *msgListDst = (void**)realloc(*msgListDst, (sizeof(void*) * currCapacity));
            if (*msgListDst == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
        }
        uint8_t msgType;
        AppMessages__ReadUInt8(r, &msgType);
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }

        void* out;
        switch (msgType) {
        case AppMessages_MessageType_Vector3Message:
            out = malloc(sizeof(AppMessages_Vector3Message));
            if (out == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
            err = AppMessages_Vector3Message_FromBytes(r, (AppMessages_Vector3Message*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != APPMESSAGES_ERR_OK) {
                return err;
            }
            break;
        case AppMessages_MessageType_NewCharacterMessage:
            out = malloc(sizeof(AppMessages_NewCharacterMessage));
            if (out == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
            err = AppMessages_NewCharacterMessage_FromBytes(r, (AppMessages_NewCharacterMessage*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != APPMESSAGES_ERR_OK) {
                return err;
            }
            break;
        case AppMessages_MessageType_CharacterJoinedTeam:
            out = malloc(sizeof(AppMessages_CharacterJoinedTeam));
            if (out == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
            err = AppMessages_CharacterJoinedTeam_FromBytes(r, (AppMessages_CharacterJoinedTeam*)out);
            (*msgListDst)[*len] = out;
            *len += 1;
            if (err != APPMESSAGES_ERR_OK) {
                return err;
            }
            break;
        default:
            return APPMESSAGES_ERR_INVALID_DATA;
            break;
        }
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_DestroyMessageList(void** msgList, size_t len) {
    for (size_t i = 0; i < len; i++) {
        AppMessages_MessageType msgType = AppMessages_GetMessageType(msgList[i]);
        switch (msgType) {
        case AppMessages_MessageType_Vector3Message:
            AppMessages_Vector3Message_Destroy((AppMessages_Vector3Message*)msgList[i]);
            break;
        case AppMessages_MessageType_NewCharacterMessage:
            AppMessages_NewCharacterMessage_Destroy((AppMessages_NewCharacterMessage*)msgList[i]);
            break;
        case AppMessages_MessageType_CharacterJoinedTeam:
            AppMessages_CharacterJoinedTeam_Destroy((AppMessages_CharacterJoinedTeam*)msgList[i]);
            break;
        case AppMessages_MessageType___NullMessage:
            return APPMESSAGES_ERR_INVALID_DATA;
        }
    }
    free(msgList);
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Color_FromBytes(AppMessages_DataAccess* r, AppMessages_Color* dst) {
    AppMessages_err_t err;
    err = AppMessages__ReadFloat(r, &(dst->red));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadFloat(r, &(dst->green));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadFloat(r, &(dst->blue));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadFloat(r, &(dst->alpha));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Color_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Color* src) {
    AppMessages_err_t err;
    err = AppMessages__WriteFloat(w, &(src->red));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteFloat(w, &(src->green));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteFloat(w, &(src->blue));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteFloat(w, &(src->alpha));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Spectrum_FromBytes(AppMessages_DataAccess* r, AppMessages_Spectrum* dst) {
    AppMessages_err_t err;
    err = AppMessages_Color_FromBytes(r, &(dst->defaultColor));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->colors_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    dst->colors = (AppMessages_Color*)malloc(sizeof(AppMessages_Color) * dst->colors_len);
    if (dst->colors == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    for (uint16_t i1 = 0; i1 < dst->colors_len; i1++) {
        err = AppMessages_Color_FromBytes(r, &(dst->colors[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Spectrum_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Spectrum* src) {
    AppMessages_err_t err;
    err = AppMessages_Color_WriteBytes(w, &(src->defaultColor));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->colors_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    for (uint16_t i1 = 0; i1 < src->colors_len; i1++) {
        err = AppMessages_Color_WriteBytes(w, &(src->colors[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Vector3Message_GetSizeInBytes(const AppMessages_Vector3Message* m, size_t* size) {
    *size = 12;
    return APPMESSAGES_ERR_OK;
}

void AppMessages_Vector3Message_Destroy(AppMessages_Vector3Message *m) {
    free(m);
}

AppMessages_err_t AppMessages_Vector3Message_FromBytes(AppMessages_DataAccess* r, AppMessages_Vector3Message* dst) {
    dst->_mt = AppMessages_MessageType_Vector3Message;
    AppMessages_err_t err;
    err = AppMessages__ReadFloat(r, &(dst->x));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadFloat(r, &(dst->y));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadFloat(r, &(dst->z));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_Vector3Message_WriteBytes(AppMessages_DataAccess* w, const AppMessages_Vector3Message* src, bool tag) {
    AppMessages_err_t err;
    if (tag) {
        err = AppMessages__WriteUInt8(w, (const uint8_t *)&(src->_mt));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    err = AppMessages__WriteFloat(w, &(src->x));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteFloat(w, &(src->y));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteFloat(w, &(src->z));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_NewCharacterMessage_GetSizeInBytes(const AppMessages_NewCharacterMessage* m, size_t* size) {
    *size = 0;
    *size += m->characterName_len;
    for (uint16_t i1 = 0; i1 < m->nicknames_len; i1++) {
        *size += 1 + m->nicknames_els_len[i1];
    }
    *size += 21;
    return APPMESSAGES_ERR_OK;
}

void AppMessages_NewCharacterMessage_Destroy(AppMessages_NewCharacterMessage *m) {
    free(m->characterName);
    for (uint16_t i1 = 0; i1 < m->nicknames_len; i1++) {
        free(m->nicknames[i1]);
    }
    free(m->nicknames_els_len);
    free(m->nicknames);
    free(m);
}

AppMessages_err_t AppMessages_NewCharacterMessage_FromBytes(AppMessages_DataAccess* r, AppMessages_NewCharacterMessage* dst) {
    dst->_mt = AppMessages_MessageType_NewCharacterMessage;
    AppMessages_err_t err;
    err = AppMessages__ReadUInt64(r, &(dst->id));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadString(r, &(dst->characterName), &(dst->characterName_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->strength));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->intelligence));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->dexterity));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt32(r, &(dst->goldInWallet));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->nicknames_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    dst->nicknames = (char**)malloc(sizeof(char*) * dst->nicknames_len);
    if (dst->nicknames == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    dst->nicknames_els_len = (uint8_t*)malloc(sizeof(uint8_t) * dst->nicknames_len);
    if (dst->nicknames == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    for (uint16_t i1 = 0; i1 < dst->nicknames_len; i1++) {
        err = AppMessages__ReadString(r, &(dst->nicknames[i1]), &(dst->nicknames_els_len[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_NewCharacterMessage_WriteBytes(AppMessages_DataAccess* w, const AppMessages_NewCharacterMessage* src, bool tag) {
    AppMessages_err_t err;
    if (tag) {
        err = AppMessages__WriteUInt8(w, (const uint8_t *)&(src->_mt));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    err = AppMessages__WriteUInt64(w, &(src->id));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteString(w, &(src->characterName), &(src->characterName_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->strength));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->intelligence));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->dexterity));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt32(w, &(src->goldInWallet));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->nicknames_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    for (uint16_t i1 = 0; i1 < src->nicknames_len; i1++) {
        err = AppMessages__WriteString(w, &(src->nicknames[i1]), &(src->nicknames_els_len[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_CharacterJoinedTeam_GetSizeInBytes(const AppMessages_CharacterJoinedTeam* m, size_t* size) {
    *size = 0;
    *size += m->teamName_len;
    *size += m->teamColors_len * 16;
    *size += 11;
    return APPMESSAGES_ERR_OK;
}

void AppMessages_CharacterJoinedTeam_Destroy(AppMessages_CharacterJoinedTeam *m) {
    free(m->teamName);
    free(m->teamColors);
    free(m);
}

AppMessages_err_t AppMessages_CharacterJoinedTeam_FromBytes(AppMessages_DataAccess* r, AppMessages_CharacterJoinedTeam* dst) {
    dst->_mt = AppMessages_MessageType_CharacterJoinedTeam;
    AppMessages_err_t err;
    err = AppMessages__ReadUInt64(r, &(dst->characterID));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadString(r, &(dst->teamName), &(dst->teamName_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__ReadUInt16(r, &(dst->teamColors_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    dst->teamColors = (AppMessages_Color*)malloc(sizeof(AppMessages_Color) * dst->teamColors_len);
    if (dst->teamColors == NULL) { return APPMESSAGES_ERR_ALLOCATION_FAILURE; }
    for (uint16_t i1 = 0; i1 < dst->teamColors_len; i1++) {
        err = AppMessages_Color_FromBytes(r, &(dst->teamColors[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}

AppMessages_err_t AppMessages_CharacterJoinedTeam_WriteBytes(AppMessages_DataAccess* w, const AppMessages_CharacterJoinedTeam* src, bool tag) {
    AppMessages_err_t err;
    if (tag) {
        err = AppMessages__WriteUInt8(w, (const uint8_t *)&(src->_mt));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    err = AppMessages__WriteUInt64(w, &(src->characterID));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteString(w, &(src->teamName), &(src->teamName_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    err = AppMessages__WriteUInt16(w, &(src->teamColors_len));
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    for (uint16_t i1 = 0; i1 < src->teamColors_len; i1++) {
        err = AppMessages_Color_WriteBytes(w, &(src->teamColors[i1]));
        if (err != APPMESSAGES_ERR_OK) {
            return err;
        }
    }
    if (err != APPMESSAGES_ERR_OK) {
        return err;
    }
    return APPMESSAGES_ERR_OK;
}


// end of struct/message definitions
///////////////////////////////////////


//
//   END OF IMPLEMENTATION
//
//////////////////////////////////////////////////////////////////////////////

#endif // APPMESSAGES_IMPLEMENTATION

#ifdef __cplusplus
}
#endif

#endif // INCLUDE_APPMESSAGES_H
